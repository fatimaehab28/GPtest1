// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tbackendgp.Data;

#nullable disable

namespace tbackendgp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250215142306_uattprop")]
    partial class uattprop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("tbackendgp.Models.IdentityCard", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IdentityCard");
                });

            modelBuilder.Entity("tbackendgp.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AnnualGrossRent")
                        .HasColumnType("float");

                    b.Property<double>("AnnualGrossYield")
                        .HasColumnType("float");

                    b.Property<double>("AppreciationRate")
                        .HasColumnType("float");

                    b.Property<double>("AppreciationValue")
                        .HasColumnType("float");

                    b.Property<double>("AvailablePrice")
                        .HasColumnType("float");

                    b.Property<double>("CurrentRent")
                        .HasColumnType("float");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("FundingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FundingPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("FundingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaintenanceFees")
                        .HasColumnType("float");

                    b.Property<double>("ManagementFees")
                        .HasColumnType("float");

                    b.Property<double>("NetRentalIncome")
                        .HasColumnType("float");

                    b.Property<double>("NetYield")
                        .HasColumnType("float");

                    b.Property<int?>("NumOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfInvestors")
                        .HasColumnType("int");

                    b.Property<double>("OperatingExpenses")
                        .HasColumnType("float");

                    b.Property<double>("PriceOfMeterSquare")
                        .HasColumnType("float");

                    b.Property<double>("ProjectedNetYield")
                        .HasColumnType("float");

                    b.Property<double?>("PropertyArea")
                        .HasColumnType("float");

                    b.Property<double?>("PropertyLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("PropertyLongitude")
                        .HasColumnType("float");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PropertyOverview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PropertyPrice")
                        .HasColumnType("float");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PropertyValueGrowth")
                        .HasColumnType("float");

                    b.Property<double>("PropertyValueGrowthPercentage")
                        .HasColumnType("float");

                    b.Property<string>("RentingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServiceFees")
                        .HasColumnType("float");

                    b.Property<double>("TotalInvestmentReturn")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PropertyName")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("tbackendgp.Models.PropertyOffer", b =>
                {
                    b.Property<int>("OfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferID"));

                    b.Property<double>("AppreciationRate")
                        .HasColumnType("float");

                    b.Property<double>("CurrentRent")
                        .HasColumnType("float");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("FundingPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaintenanceFees")
                        .HasColumnType("float");

                    b.Property<double>("ManagementFees")
                        .HasColumnType("float");

                    b.Property<int?>("NumOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfInvestors")
                        .HasColumnType("int");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfferStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OperatingExpenses")
                        .HasColumnType("float");

                    b.Property<double?>("PropertyArea")
                        .HasColumnType("float");

                    b.Property<double?>("PropertyLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("PropertyLongitude")
                        .HasColumnType("float");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PropertyOverview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PropertyPrice")
                        .HasColumnType("float");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServiceFees")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OfferID");

                    b.ToTable("PropertyOffers");
                });

            modelBuilder.Entity("tbackendgp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("tbackendgp.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("tbackendgp.Models.IdentityCard", b =>
                {
                    b.HasOne("tbackendgp.Models.User", "User")
                        .WithOne("IdentityCard")
                        .HasForeignKey("tbackendgp.Models.IdentityCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("tbackendgp.Models.Property", b =>
                {
                    b.OwnsOne("tbackendgp.Models.Address", "PropertyAddress", b1 =>
                        {
                            b1.Property<int>("PropertyId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.Navigation("PropertyAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("tbackendgp.Models.PropertyOffer", b =>
                {
                    b.OwnsOne("tbackendgp.Models.Address", "PropertyAddress", b1 =>
                        {
                            b1.Property<int>("PropertyOfferOfferID")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PropertyOfferOfferID");

                            b1.ToTable("PropertyOffers");

                            b1.WithOwner()
                                .HasForeignKey("PropertyOfferOfferID");
                        });

                    b.Navigation("PropertyAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("tbackendgp.Models.User", b =>
                {
                    b.HasOne("tbackendgp.Models.UserType", "UserType")
                        .WithMany("User")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("tbackendgp.Models.User", b =>
                {
                    b.Navigation("IdentityCard")
                        .IsRequired();
                });

            modelBuilder.Entity("tbackendgp.Models.UserType", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
